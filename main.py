"""
FastAPI Inference Service for Churn Prediction.

Exposes a JSON API to score single-user feature payloads with the packaged
model. OpenAPI docs are auto-generated by FastAPI at `/docs` (Swagger UI)
and `/redoc` (ReDoc).

This module only loads an already-packaged model (see `deployment.deploy_model`)
and does **not** train or alter model parameters at runtime.

Author: Ahmed Alghaith
Date: August 2025
"""
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import joblib
import pandas as pd
from datetime import datetime

class UserFeatures(BaseModel):
    """
    Payload schema for a single user's features used by the model.

    All fields must be numeric. Any missing feature at inference time will be
    automatically added with a default value of 0 before prediction.
    """
    total_events: float
    unique_sessions: float
    total_songs_played: float
    avg_session_length: float
    days_active: float
    thumbs_up: float
    thumbs_down: float
    home_visits: float
    settings_visits: float
    help_visits: float
    add_friend: float
    add_playlist: float
    engagement_ratio: float
    avg_daily_events: float
    paid_events_ratio: float
    last_level_paid: float
    weekend_activity_ratio: float
    peak_hour: float
    session_variety: float

app = FastAPI(title="Churn Prediction API")

@app.on_event("startup")
def load_model():
    """Load packaged model and feature ordering on process startup.

    Expects a Joblib package produced by `deploy_model()` containing:
      - "model": fitted estimator
      - "metadata": dict with "feature_columns"

    Raises:
        FileNotFoundError: If the package files are missing.
        KeyError: If expected keys are not present in the package.
    """
    global model, feature_columns
    pkg = joblib.load("churn_predictor_v1_production.pkl")
    if isinstance(pkg, dict) and "model" in pkg:
        # You saved a dict
        model = pkg["model"]
        feature_columns = pkg["metadata"]["feature_columns"]
    else:
        # You saved the model directly
        model = pkg
        # Load metadata separately if you have it:
        meta = joblib.load("model_metadata.pkl")  # or JSON
        feature_columns = meta["feature_columns"]


@app.post("/predict")
def predict(features: UserFeatures):
    """Score a single user payload and return prediction + probability.

    Args:
        features: Pydantic model of user features (see `UserFeatures`).

    Returns:
        dict: {
          "churn_prediction": int (0/1),
          "churn_probability": float in [0,1],
          "risk_level": "Low"|"Medium"|"High",
          "model": str estimator name,
          "timestamp": ISO-8601 string (UTC)
        }

    Raises:
        HTTPException(500): If the underlying estimator raises an error.
    """
    data = features.dict()
    df = pd.DataFrame([data])
    for c in feature_columns:
        if c not in df.columns:
            df[c] = 0
    X = df[feature_columns]
    try:
        pred = model.predict(X)[0]
        proba = (
            model.predict_proba(X)[0, 1]
            if hasattr(model, "predict_proba") else float(pred)
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
    if proba < 0.3:
        risk = "Low"
    elif proba < 0.7:
        risk = "Medium"
    else:
        risk = "High"
    return {
        "churn_prediction": int(pred),
        "churn_probability": float(proba),
        "risk_level": risk,
        "model": type(model).__name__,
        "timestamp": datetime.utcnow().isoformat()
    }
